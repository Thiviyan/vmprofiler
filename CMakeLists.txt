# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(vmprofiler)

# Options
option(ZYDIS_BUILD_SHARED_LIB OFF)
option(ZYDIS_BUILD_EXAMPLES OFF)
option(ZYDIS_BUILD_TOOLS OFF)
option(ZYDIS_FUZZ_AFL_FAST OFF)
option(ZYDIS_LIBFUZZER OFF)

# zydis
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/zydis")
else()
	set(CMAKE_FOLDER zydis)
endif()
add_subdirectory(zydis)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Target vmprofiler
set(CMKR_TARGET vmprofiler)
set(vmprofiler_SOURCES "")

list(APPEND vmprofiler_SOURCES
	"src/vmlocate.cpp"
	"include/vmctx.hpp"
	"include/vmlocate.hpp"
	"include/vmprofiler.hpp"
)

list(APPEND vmprofiler_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${vmprofiler_SOURCES})
add_library(vmprofiler STATIC)

if(vmprofiler_SOURCES)
	target_sources(vmprofiler PRIVATE ${vmprofiler_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${vmprofiler_SOURCES})

target_compile_definitions(vmprofiler PUBLIC
	NOMINMAX
)

target_compile_features(vmprofiler PUBLIC
	cxx_std_20
)

target_include_directories(vmprofiler PUBLIC
	include
)

target_link_libraries(vmprofiler PUBLIC
	Zydis
	linux-pe
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target linux-pe
set(CMKR_TARGET linux-pe)
set(linux-pe_SOURCES "")

set(CMKR_SOURCES ${linux-pe_SOURCES})
add_library(linux-pe INTERFACE)

if(linux-pe_SOURCES)
	target_sources(linux-pe INTERFACE ${linux-pe_SOURCES})
endif()

target_include_directories(linux-pe INTERFACE
	"linux-pe/includes/"
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

